// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum AccountType {
  EXPLORER
  PRO
  PREMIUM
}

enum NewsCategory {
  TECH
  BUSINESS
  FINANCE
  SPORTS
  AI
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  LIKE
}

enum PlatformVoteType {
  LOVE_IT
  WOULD_USE
  NOT_INTERESTED
}

enum NotificationType {
  APP_UPDATE
  FEATURE_ANNOUNCEMENT
  COMMUNITY_NEWS
  MAINTENANCE
  GENERAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model BetaSignup {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String?
  currentStatus     String   // "high_school", "college_freshman", "college_sophomore", etc.
  interestArea      String?  // "technology", "business", "healthcare", etc.
  university        String?
  graduationYear    String?
  phoneNumber       String?
  howHeardAboutUs   String?  // "social_media", "friend", "search", etc.
  specificInterests String?  // Text field for what they're most interested in
  quizResults       String?  // JSON string of their quiz results if they took it
  source            String?  // Which page/button they signed up from
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  firstName     String
  lastName      String
  accountType   AccountType @default(EXPLORER)
  githubId      String?     @unique
  university    String?
  graduationYear String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Pro & Explorer Features
  careerQuizResults     CareerQuizResult[]
  majorRecommendations  MajorRecommendation[]
  skillDemands          SkillDemand[]
  careerTimeline        CareerTimeline?
  
  // Pro-specific Features
  aiImpactAnalyses      AIImpactAnalysis[]    @relation("UserAIAnalyses")
  notificationSettings  NotificationSettings?
  salaryTrends         SalaryTrend[]
  weeklyUpdates        WeeklyUpdate[]
  
  // News Feature Relations (Pro Users Only)
  newsComments         NewsComment[]
  newsVotes           NewsVote[]
  savedArticles       SavedArticle[]
  
  // Feature Voting Relations (Pro Users Only)
  featureVotes        FeatureVote[]
  
  // Platform Feedback Relations (All Users)
  platformFeedback    PlatformFeedback[]
  
  // Mobile App Voting Relations (All Users)
  mobileAppVotes      MobileAppVote[]
  
  // Notification Relations (Pro Users Only)
  userNotifications   UserNotification[]
}

model CareerQuizResult {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  results   String   // JSON string of quiz results
  createdAt DateTime @default(now())
}

model MajorRecommendation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  majorName   String
  confidence  Float
  reasoning   String
  createdAt   DateTime @default(now())
}

model SkillDemand {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  skillName   String
  demandScore Float
  trending    Boolean  @default(false)
  updatedAt   DateTime @updatedAt
}

model CareerTimeline {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  timeline    String   // JSON string of career timeline
  updatedAt   DateTime @updatedAt
}

// Pro-specific Models
model AIImpactAnalysis {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserAIAnalyses", fields: [userId], references: [id])
  industry    String
  impact      String   // JSON string of AI impact analysis
  createdAt   DateTime @default(now())
}

model NotificationSettings {
  id                String  @id @default(cuid())
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id])
  emailEnabled     Boolean @default(true)
  pushEnabled      Boolean @default(false)
  preferences      String  // JSON string of notification preferences
}

model SalaryTrend {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  jobTitle    String
  salaryData  String   // JSON string of salary trend data
  updatedAt   DateTime @updatedAt
}

model WeeklyUpdate {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  content     String   // JSON string of weekly update content
  createdAt   DateTime @default(now())
  readAt      DateTime?
}

// News Feature Models (Pro Users Only)
model NewsArticle {
  id          String        @id @default(cuid())
  title       String
  content     String        // Full article content
  summary     String        // Brief summary for cards
  category    NewsCategory
  imageUrl    String?       // Optional featured image
  sourceUrl   String?       // Link to original article
  authorName  String?       // Original author name
  publishedAt DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  comments    NewsComment[]
  votes       NewsVote[]
  savedBy     SavedArticle[]
}

model NewsComment {
  id          String   @id @default(cuid())
  articleId   String
  article     NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  content     String
  parentId    String?  // For reply threading
  parent      NewsComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     NewsComment[] @relation("CommentReplies")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  votes       NewsVote[]
}

model NewsVote {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  voteType    VoteType
  
  // Either article or comment (not both)
  articleId   String?
  article     NewsArticle? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  commentId   String?
  comment     NewsComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  // Ensure user can only vote once per article/comment
  @@unique([userId, articleId])
  @@unique([userId, commentId])
}

model SavedArticle {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  articleId   String
  article     NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  // Ensure user can only save an article once
  @@unique([userId, articleId])
}

model FeatureVote {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  featureName String   // e.g., "university-directory-marketplace"
  voteType    VoteType // UPVOTE or DOWNVOTE
  createdAt   DateTime @default(now())
  
  // Ensure user can only vote once per feature
  @@unique([userId, featureName])
}

model PlatformFeedback {
  id          String            @id @default(cuid())
  userId      String?           // Optional - for logged in users
  user        User?             @relation(fields: [userId], references: [id])
  ipAddress   String            // For anonymous users and spam prevention
  voteType    PlatformVoteType
  feedback    String?           // Optional text feedback
  createdAt   DateTime          @default(now())
}

model MobileAppVote {
  id          String   @id @default(cuid())
  userId      String?  // Optional - for logged in users
  user        User?    @relation(fields: [userId], references: [id])
  ipAddress   String   // For anonymous users and spam prevention
  vote        String   // 'yes' or 'no'
  createdAt   DateTime @default(now())
  
  // Ensure one vote per user/IP combination
  @@unique([userId])
  @@unique([ipAddress])
}

model FoundingMember {
  id        String   @id @default(cuid())
  email     String   @unique
  ipAddress String
  joinedAt  DateTime @default(now())
}

model Notification {
  id              String               @id @default(cuid())
  title           String
  message         String
  type            NotificationType     @default(GENERAL)
  priority        NotificationPriority @default(NORMAL)
  targetAudience  String               @default("PRO") // "PRO", "PREMIUM", "ALL_PRO"
  isActive        Boolean              @default(true)
  expiresAt       DateTime?            // Optional expiration
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relations
  userNotifications UserNotification[]
}

model UserNotification {
  id             String       @id @default(cuid())
  userId         String
  notificationId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  
  // Relations
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])
  
  // Ensure one record per user per notification
  @@unique([userId, notificationId])
}
